# k8s/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
  namespace: bot-platform
  labels:
    app: backend
    tier: api
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
        tier: api
    spec:
      containers:
      - name: backend
        image: YOUR_DOCKER_REGISTRY/backend:PLACEHOLDER_TAG # Esta línea será reemplazada por el pipeline de CD
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 3000
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "3000"
        # --- INICIO DE LA CORRECCIÓN DE SEGURIDAD ---
        - name: MONGODB_URI
          valueFrom:
            secretKeyRef:
              name: app-secrets # Se leerá desde el secreto 'app-secrets'
              key: mongodb-uri   # La clave que buscará dentro del secreto
        # --- FIN DE LA CORRECCIÓN DE SEGURIDAD ---
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: jwt-secret
        - name: KUBERNETES_NAMESPACE
          value: "bot-platform"
        - name: WEATHER_API_KEY
          valueFrom:
            secretKeyRef:
              name: bot-secrets
              key: weather-api-key
        - name: NEWS_API_KEY
          valueFrom:
            secretKeyRef:
              name: bot-secrets
              key: news-api-key
        - name: GEMINI_API_KEY
          valueFrom:
            secretKeyRef:
              name: bot-secrets
              key: gemini-api-key
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        volumeMounts:
        - name: docker-socket
          mountPath: /var/run/docker.sock
        - name: app-logs
          mountPath: /app/logs
      volumes:
      - name: docker-socket
        hostPath:
          path: /var/run/docker.sock
      - name: app-logs
        emptyDir: {}
      serviceAccountName: bot-creator-account
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: backend
  namespace: bot-platform
spec:
  selector:
    app: backend
  ports:
  - port: 80
    targetPort: 3000
  type: ClusterIP
