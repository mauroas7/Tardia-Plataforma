name: CD - Deploy to Kubernetes Lab

on:
  workflow_run:
    workflows: ["CI - Build and Push Images"]
    types:
      - completed
    branches:
      - main
      - test

jobs:
  deploy-to-test:
    runs-on: self-hosted 
    
    environment: test 
    
    if: ${{ github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'test' }}
    
    env:
      NAMESPACE: bot-platform 
      CLUSTER_NAME: lab-cluster

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download deployment artifact
        uses: actions/download-artifact@v4
        with:
          name: deployment-info
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ github.event.workflow_run.id }}

      - name: Load deployment info
        id: deploy_info
        run: |
          IMAGE_TAG=$(cat image_tag.txt)
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Set up Kubeconfig for Lab Cluster
        run: |
          mkdir -p $HOME/.kube
          # <= Usa el secreto KUBE_CONFIG_BASE64 definido en el entorno 'test' de GitHub
          echo "${{ secrets.KUBE_CONFIG_BASE64 }}" | base64 --decode > $HOME/.kube/config
          kubectl cluster-info
          kubectl config use-context $(kubectl config get-contexts -o name | grep '${{ env.CLUSTER_NAME }}')

      - name: Create or Apply Namespace
        # <= Usa la variable para crear el namespace 'test' si no existe
        run: kubectl create namespace ${{ env.NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy to Kubernetes
        run: |
            echo "Deploying to namespace ${{ env.NAMESPACE }}..."
            # Aquí va tu lógica de despliegue. Asegúrate de que todos los
            # comandos kubectl usen el namespace correcto.
            # Ejemplo: kubectl apply -f k8s/deployment.yaml -n ${{ env.NAMESPACE }}
            # ...
            
      - name: Show Deployment Status
        run: kubectl get all -n ${{ env.NAMESPACE }}


 
  deploy-to-production:
    runs-on: self-hosted # O ubuntu-latest
    
    
    environment: production
    
    
    if: ${{ github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'main' }}
    
    env:
      NAMESPACE: bot-platform
      CLUSTER_NAME: lab-cluster

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download deployment artifact
        uses: actions/download-artifact@v4
        with:
          name: deployment-info
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ github.event.workflow_run.id }}

      - name: Load deployment info
        id: deploy_info
        run: |
          IMAGE_TAG=$(cat image_tag.txt)
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Set up Kubeconfig for Lab Cluster
        run: |
          mkdir -p $HOME/.kube
          # <= Usa el secreto KUBE_CONFIG_BASE64 definido en el entorno 'production' de GitHub
          echo "${{ secrets.KUBE_CONFIG_BASE64 }}" | base64 --decode > $HOME/.kube/config
          kubectl cluster-info
          kubectl config use-context $(kubectl config get-contexts -o name | grep '${{ env.CLUSTER_NAME }}')

      - name: Create or Apply Namespace
        # <= Usa la variable para crear el namespace 'produccion' si no existe
        run: kubectl create namespace ${{ env.NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -
        
      - name: Deploy to Kubernetes
        run: |
            echo "Deploying to namespace ${{ env.NAMESPACE }}..."
            # Ejemplo: kubectl apply -f k8s/deployment.yaml -n ${{ env.NAMESPACE }}
            # ...

      - name: Show Deployment Status
        run: kubectl get all -n ${{ env.NAMESPACE }}
