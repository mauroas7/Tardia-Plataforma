# cd.yml - Versión final y completa

name: CD - Deploy to Kubernetes Lab

on:
  workflow_run:
    workflows: ["CI - Build and Push Images"]
    types:
      - completed
    branches:
      - main
      - test

jobs:
  # --- JOB PARA DESPLEGAR AL ENTORNO DE PRUEBAS ---
  deploy-to-test:
    runs-on: self-hosted
    environment: test 
    if: ${{ github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'test' }}
    
    env:
      NAMESPACE: test
      CLUSTER_NAME: lab-cluster
      # Asegúrate de que este secreto exista en GitHub con tu usuario de DockerHub (ej: tardiatest)
      DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download deployment artifact
        uses: actions/download-artifact@v4
        with:
          name: deployment-info
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ github.event.workflow_run.id }}

      - name: Load deployment info
        id: deploy_info
        run: |
          IMAGE_TAG=$(cat image_tag.txt)
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Set up Kubeconfig for Lab Cluster
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG_BASE64 }}" | base64 --decode > $HOME/.kube/config
          kubectl cluster-info
          kubectl config use-context $(kubectl config get-contexts -o name | grep '${{ env.CLUSTER_NAME }}')

      - name: Create or Apply Namespace
        run: kubectl get namespace ${{ env.NAMESPACE }} || kubectl create namespace ${{ env.NAMESPACE }}

      # <= SECCIÓN MODIFICADA Y COMPLETADA
      - name: Deploy to Kubernetes
        run: |
          echo "Deploying to namespace ${{ env.NAMESPACE }} with image tag ${{ steps.deploy_info.outputs.IMAGE_TAG }}"
          
          # 1. Reemplaza la etiqueta de la imagen en los archivos de despliegue
          sed -i 's|image:.*tardia-plataforma-backend.*|image: ${{ env.DOCKER_REGISTRY }}/tardia-plataforma-backend:${{ steps.deploy_info.outputs.IMAGE_TAG }}|g' k8s/deployment.yaml
          sed -i 's|image:.*tardia-plataforma-frontend.*|image: ${{ env.DOCKER_REGISTRY }}/tardia-plataforma-frontend:${{ steps.deploy_info.outputs.IMAGE_TAG }}|g' k8s/frontend.yaml
          
          # 2. Aplica todos los manifiestos de Kubernetes
          echo "Applying Kubernetes manifests..."
          kubectl apply -f k8s/rbac.yaml
          kubectl apply -f k8s/configmaps.yaml -n ${{ env.NAMESPACE }}
          kubectl apply -f k8s/deployment.yaml -n ${{ env.NAMESPACE }}
          kubectl apply -f k8s/frontend.yaml -n ${{ env.NAMESPACE }}
          
          # 3. Espera a que los despliegues estén listos
          echo "Deployments applied. Waiting for rollout..."
          kubectl rollout status deployment/backend -n ${{ env.NAMESPACE }} --timeout=5m
          kubectl rollout status deployment/frontend -n ${{ env.NAMESPACE }} --timeout=3m
            
      - name: Show Deployment Status
        run: kubectl get all -n ${{ env.NAMESPACE }}


  # --- JOB PARA DESPLEGAR AL ENTORNO DE PRODUCCIÓN ---
  deploy-to-production:
    runs-on: self-hosted
    environment: production
    if: ${{ github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'main' }}
    
    env:
      NAMESPACE: produccion
      CLUSTER_NAME: lab-cluster
      DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download deployment artifact
        uses: actions/download-artifact@v4
        with:
          name: deployment-info
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ github.event.workflow_run.id }}

      - name: Load deployment info
        id: deploy_info
        run: |
          IMAGE_TAG=$(cat image_tag.txt)
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Set up Kubeconfig for Lab Cluster
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG_BASE64 }}" | base64 --decode > $HOME/.kube/config
          kubectl cluster-info
          kubectl config use-context $(kubectl config get-contexts -o name | grep '${{ env.CLUSTER_NAME }}')

      - name: Create or Apply Namespace
        run: kubectl get namespace ${{ env.NAMESPACE }} || kubectl create namespace ${{ env.NAMESPACE }}
        
      # <= SECCIÓN MODIFICADA Y COMPLETADA
      - name: Deploy to Kubernetes
        run: |
          echo "Deploying to namespace ${{ env.NAMESPACE }} with image tag ${{ steps.deploy_info.outputs.IMAGE_TAG }}"

          # 1. Reemplaza la etiqueta de la imagen en los archivos de despliegue
          sed -i 's|image:.*tardia-plataforma-backend.*|image: ${{ env.DOCKER_REGISTRY }}/tardia-plataforma-backend:${{ steps.deploy_info.outputs.IMAGE_TAG }}|g' k8s/deployment.yaml
          sed -i 's|image:.*tardia-plataforma-frontend.*|image: ${{ env.DOCKER_REGISTRY }}/tardia-plataforma-frontend:${{ steps.deploy_info.outputs.IMAGE_TAG }}|g' k8s/frontend.yaml
          
          # 2. Aplica todos los manifiestos de Kubernetes
          echo "Applying Kubernetes manifests..."
          kubectl apply -f k8s/rbac.yaml
          kubectl apply -f k8s/configmaps.yaml -n ${{ env.NAMESPACE }}
          kubectl apply -f k8s/deployment.yaml -n ${{ env.NAMESPACE }}
          kubectl apply -f k8s/frontend.yaml -n ${{ env.NAMESPACE }}

          # 3. Espera a que los despliegues estén listos
          echo "Deployments applied. Waiting for rollout..."
          kubectl rollout status deployment/backend -n ${{ env.NAMESPACE }} --timeout=5m
          kubectl rollout status deployment/frontend -n ${{ env.NAMESPACE }} --timeout=3m

      - name: Show Deployment Status
        run: kubectl get all -n ${{ env.NAMESPACE }}
